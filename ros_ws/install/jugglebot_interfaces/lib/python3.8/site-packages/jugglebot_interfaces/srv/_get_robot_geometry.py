# generated from rosidl_generator_py/resource/_idl.py.em
# with input from jugglebot_interfaces:srv/GetRobotGeometry.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_GetRobotGeometry_Request(type):
    """Metaclass of message 'GetRobotGeometry_Request'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('jugglebot_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'jugglebot_interfaces.srv.GetRobotGeometry_Request')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__get_robot_geometry__request
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__get_robot_geometry__request
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__get_robot_geometry__request
            cls._TYPE_SUPPORT = module.type_support_msg__srv__get_robot_geometry__request
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__get_robot_geometry__request

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class GetRobotGeometry_Request(metaclass=Metaclass_GetRobotGeometry_Request):
    """Message class 'GetRobotGeometry_Request'."""

    __slots__ = [
    ]

    _fields_and_field_types = {
    }

    SLOT_TYPES = (
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)


# Import statements for member types

# Member 'start_pos'
# Member 'base_nodes'
# Member 'init_plat_nodes'
# Member 'init_arm_nodes'
# Member 'init_hand_nodes'
# Member 'init_leg_lengths'
import array  # noqa: E402, I100

# already imported above
# import rosidl_parser.definition


class Metaclass_GetRobotGeometry_Response(type):
    """Metaclass of message 'GetRobotGeometry_Response'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('jugglebot_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'jugglebot_interfaces.srv.GetRobotGeometry_Response')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__get_robot_geometry__response
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__get_robot_geometry__response
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__get_robot_geometry__response
            cls._TYPE_SUPPORT = module.type_support_msg__srv__get_robot_geometry__response
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__get_robot_geometry__response

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class GetRobotGeometry_Response(metaclass=Metaclass_GetRobotGeometry_Response):
    """Message class 'GetRobotGeometry_Response'."""

    __slots__ = [
        '_start_pos',
        '_base_nodes',
        '_init_plat_nodes',
        '_init_arm_nodes',
        '_init_hand_nodes',
        '_init_leg_lengths',
        '_leg_stroke',
        '_hand_stroke',
    ]

    _fields_and_field_types = {
        'start_pos': 'sequence<double>',
        'base_nodes': 'sequence<double>',
        'init_plat_nodes': 'sequence<double>',
        'init_arm_nodes': 'sequence<double>',
        'init_hand_nodes': 'sequence<double>',
        'init_leg_lengths': 'sequence<double>',
        'leg_stroke': 'float',
        'hand_stroke': 'float',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.start_pos = array.array('d', kwargs.get('start_pos', []))
        self.base_nodes = array.array('d', kwargs.get('base_nodes', []))
        self.init_plat_nodes = array.array('d', kwargs.get('init_plat_nodes', []))
        self.init_arm_nodes = array.array('d', kwargs.get('init_arm_nodes', []))
        self.init_hand_nodes = array.array('d', kwargs.get('init_hand_nodes', []))
        self.init_leg_lengths = array.array('d', kwargs.get('init_leg_lengths', []))
        self.leg_stroke = kwargs.get('leg_stroke', float())
        self.hand_stroke = kwargs.get('hand_stroke', float())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.start_pos != other.start_pos:
            return False
        if self.base_nodes != other.base_nodes:
            return False
        if self.init_plat_nodes != other.init_plat_nodes:
            return False
        if self.init_arm_nodes != other.init_arm_nodes:
            return False
        if self.init_hand_nodes != other.init_hand_nodes:
            return False
        if self.init_leg_lengths != other.init_leg_lengths:
            return False
        if self.leg_stroke != other.leg_stroke:
            return False
        if self.hand_stroke != other.hand_stroke:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def start_pos(self):
        """Message field 'start_pos'."""
        return self._start_pos

    @start_pos.setter
    def start_pos(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'start_pos' array.array() must have the type code of 'd'"
            self._start_pos = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'start_pos' field must be a set or sequence and each value of type 'float'"
        self._start_pos = array.array('d', value)

    @property
    def base_nodes(self):
        """Message field 'base_nodes'."""
        return self._base_nodes

    @base_nodes.setter
    def base_nodes(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'base_nodes' array.array() must have the type code of 'd'"
            self._base_nodes = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'base_nodes' field must be a set or sequence and each value of type 'float'"
        self._base_nodes = array.array('d', value)

    @property
    def init_plat_nodes(self):
        """Message field 'init_plat_nodes'."""
        return self._init_plat_nodes

    @init_plat_nodes.setter
    def init_plat_nodes(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'init_plat_nodes' array.array() must have the type code of 'd'"
            self._init_plat_nodes = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'init_plat_nodes' field must be a set or sequence and each value of type 'float'"
        self._init_plat_nodes = array.array('d', value)

    @property
    def init_arm_nodes(self):
        """Message field 'init_arm_nodes'."""
        return self._init_arm_nodes

    @init_arm_nodes.setter
    def init_arm_nodes(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'init_arm_nodes' array.array() must have the type code of 'd'"
            self._init_arm_nodes = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'init_arm_nodes' field must be a set or sequence and each value of type 'float'"
        self._init_arm_nodes = array.array('d', value)

    @property
    def init_hand_nodes(self):
        """Message field 'init_hand_nodes'."""
        return self._init_hand_nodes

    @init_hand_nodes.setter
    def init_hand_nodes(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'init_hand_nodes' array.array() must have the type code of 'd'"
            self._init_hand_nodes = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'init_hand_nodes' field must be a set or sequence and each value of type 'float'"
        self._init_hand_nodes = array.array('d', value)

    @property
    def init_leg_lengths(self):
        """Message field 'init_leg_lengths'."""
        return self._init_leg_lengths

    @init_leg_lengths.setter
    def init_leg_lengths(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'init_leg_lengths' array.array() must have the type code of 'd'"
            self._init_leg_lengths = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'init_leg_lengths' field must be a set or sequence and each value of type 'float'"
        self._init_leg_lengths = array.array('d', value)

    @property
    def leg_stroke(self):
        """Message field 'leg_stroke'."""
        return self._leg_stroke

    @leg_stroke.setter
    def leg_stroke(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'leg_stroke' field must be of type 'float'"
        self._leg_stroke = value

    @property
    def hand_stroke(self):
        """Message field 'hand_stroke'."""
        return self._hand_stroke

    @hand_stroke.setter
    def hand_stroke(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'hand_stroke' field must be of type 'float'"
        self._hand_stroke = value


class Metaclass_GetRobotGeometry(type):
    """Metaclass of service 'GetRobotGeometry'."""

    _TYPE_SUPPORT = None

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('jugglebot_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'jugglebot_interfaces.srv.GetRobotGeometry')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._TYPE_SUPPORT = module.type_support_srv__srv__get_robot_geometry

            from jugglebot_interfaces.srv import _get_robot_geometry
            if _get_robot_geometry.Metaclass_GetRobotGeometry_Request._TYPE_SUPPORT is None:
                _get_robot_geometry.Metaclass_GetRobotGeometry_Request.__import_type_support__()
            if _get_robot_geometry.Metaclass_GetRobotGeometry_Response._TYPE_SUPPORT is None:
                _get_robot_geometry.Metaclass_GetRobotGeometry_Response.__import_type_support__()


class GetRobotGeometry(metaclass=Metaclass_GetRobotGeometry):
    from jugglebot_interfaces.srv._get_robot_geometry import GetRobotGeometry_Request as Request
    from jugglebot_interfaces.srv._get_robot_geometry import GetRobotGeometry_Response as Response

    def __init__(self):
        raise NotImplementedError('Service classes can not be instantiated')
